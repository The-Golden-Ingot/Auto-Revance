name: Build and Release
permissions: write-all

on:
  schedule:
    - cron: "0 9 * * *"  # Run daily at 9 AM UTC
  workflow_dispatch:
    inputs:
      target:
        description: 'Build target'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - youtube
          - youtube-music

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      should_build: ${{ steps.check.outputs.should_build }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
      - id: check
        run: bash src/ci/check.sh

  build:
    needs: prepare
    if: needs.prepare.outputs.should_build == 'true' || github.event_name == 'workflow_dispatch'
    strategy:
      matrix:
        target: ${{ fromJSON(github.event.inputs.target == 'all' && '["youtube", "youtube-music"]' || format('["%s"]', github.event.inputs.target)) }}
        arch: [arm64-v8a, armeabi-v7a]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
      
      - name: Build ${{ matrix.target }}
        run: bash src/builders/revanced.sh ${{ matrix.target }} "" ${{ matrix.arch }}
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target }}-${{ matrix.arch }}-artifacts
          path: |
            release/*.apk
            release/versions.txt

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          path: artifacts
      
      - name: Create release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Get version info
          version_file=$(find artifacts -name "versions.txt" | head -n 1)
          youtube_version=$(grep "youtube=" "$version_file" | cut -d'=' -f2)
          music_version=$(grep "youtube-music=" "$version_file" | cut -d'=' -f2)
          
          # Create release
          release_tag="v$(date +'%Y.%m.%d')"
          gh release create "$release_tag" \
            --title "Release $release_tag" \
            --notes "### Versions
            - YouTube: $youtube_version
            - YouTube Music: $music_version" \
            artifacts/**/*.apk
