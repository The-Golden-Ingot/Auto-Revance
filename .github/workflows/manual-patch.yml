name: Manual Patch
permissions: write-all

on:
  workflow_dispatch:
    inputs:
      youtube:
        description: 'Patch YouTube (Anddea)'
        type: boolean
        default: false
      twitter:
        description: 'Patch Twitter (Piko)'
        type: boolean
        default: false
      instagram:
        description: 'Patch Instagram (Experiments)'
        type: boolean
        default: false
      googlephotos:
        description: 'Patch Google Photos (ReVanced)'
        type: boolean
        default: false
      soundcloud:
        description: 'Patch SoundCloud (ReVanced)'
        type: boolean
        default: false
  workflow_call:
    inputs:
      target:
        required: true
        type: string
      apps:
        required: true
        type: string

jobs:
  validate:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      provider: ${{ steps.determine-provider.outputs.provider }}
    steps:
      - uses: actions/checkout@v4
      
      # Determine provider from selected apps
      - name: Determine provider
        id: determine-provider
        run: |
          declare -A app_providers=(
            ["youtube"]="anddea"
            ["twitter"]="piko"
            ["instagram"]="experiments"
            ["googlephotos"]="revanced"
            ["soundcloud"]="revanced"
          )
          
          # Map checkbox inputs to apps array
          declare -a selected_apps=()
          
          # Check each app input
          if [[ "${{ github.event.inputs.youtube }}" == "true" ]]; then
            selected_apps+=("youtube")
          fi
          if [[ "${{ github.event.inputs.twitter }}" == "true" ]]; then
            selected_apps+=("twitter")
          fi
          if [[ "${{ github.event.inputs.instagram }}" == "true" ]]; then
            selected_apps+=("instagram")
          fi
          if [[ "${{ github.event.inputs.googlephotos }}" == "true" ]]; then
            selected_apps+=("googlephotos")
          fi
          if [[ "${{ github.event.inputs.soundcloud }}" == "true" ]]; then
            selected_apps+=("soundcloud")
          fi
          
          # For workflow_call, use the target and apps input
          if [ -n "${{ inputs.target }}" ]; then
            echo "provider=${{ inputs.target }}" >> $GITHUB_OUTPUT
            IFS=',' read -ra selected_apps <<< "${{ inputs.apps }}"
          else
            # Get provider from first selected app
            if [ ${#selected_apps[@]} -eq 0 ]; then
              echo "::error::Please select at least one app to patch"
              exit 1
            fi
            
            provider="${app_providers[${selected_apps[0]}]}"
            echo "provider=$provider" >> $GITHUB_OUTPUT
            
            # Validate all selected apps are from same provider
            for app in "${selected_apps[@]}"; do
              if [ "${app_providers[$app]}" != "$provider" ]; then
                echo "::error::Cannot mix apps from different providers. All selected apps must be from the same provider."
                exit 1
              fi
            done
          fi
          
          # Create JSON array for matrix
          matrix_json="$(printf '"%s",' "${selected_apps[@]}" | sed 's/,$//')"
          echo "matrix={\"app\":[$matrix_json]}" >> $GITHUB_OUTPUT

  build:
    needs: validate
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{fromJson(needs.validate.outputs.matrix)}}
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
      
      # Map provider to script name
      - name: Set script name
        id: script
        run: |
          case "${{ needs.validate.outputs.provider }}" in
            "revanced")
              echo "name=Revanced.sh" >> $GITHUB_OUTPUT
              ;;
            "anddea")
              echo "name=Anddea-Revanced-Extended.sh" >> $GITHUB_OUTPUT
              ;;
            "piko")
              echo "name=Piko.sh" >> $GITHUB_OUTPUT
              ;;
            "experiments")
              echo "name=Revanced-Experiment.sh" >> $GITHUB_OUTPUT
              ;;
          esac
      
      - name: Build ${{ matrix.app }}
        run: bash src/build/${{ steps.script.outputs.name }} ${{ matrix.app }}
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.app }}-patched
          path: |
            release/*.apk
            release/versions.txt

  release:
    needs: [validate, build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          path: artifacts
          pattern: '*-patched'
          merge-multiple: true
      
      - name: Create release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Get version info and create notes for each app
          release_notes="### Manual Build\n\n"
          release_notes+="Provider: ${{ needs.validate.outputs.provider }}\n\n"
          release_notes+="#### Apps:\n"
          
          version_file=$(find artifacts -name "versions.txt" | head -n 1)
          for app in ${{ needs.validate.outputs.matrix }}; do
            app=$(echo "$app" | tr -d '"[],' | tr -d ' ')
            version=$(grep "$app=" "$version_file" | cut -d'=' -f2 || echo "N/A")
            release_notes+="- $app: $version\n"
          done
          
          # Create release
          release_tag="manual-$(date +'%Y.%m.%d-%H%M%S')"
          gh release create "$release_tag" \
            --title "Manual Build $release_tag" \
            --notes "$release_notes" \
            artifacts/**/*.apk
